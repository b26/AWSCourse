Description: >
  ECS Cluster configuration template.

Parameters:
  InstanceType: 
    Type: String
    Default: t2.micro
  ClusterSize:
    Type: Number
    Default: 2
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  SourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  VpcId:
    Type: AWS::EC2::VPC::Id
  VpcDefaultSG:
    Type: String

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMI: ami-6df8fe7a
    us-east-2:
      AMI: ami-c6b5efa3
    us-west-1:
      AMI: ami-1eda8d7e
    us-west-2:
      AMI: ami-a2ca61c2
    eu-west-1:
      AMI: ami-ba346ec9
    eu-west-2:
      AMI: ami-42c5cf26
    eu-central-1:
      AMI: ami-e012d48f
    ap-northeast-1:
      AMI: ami-08f7956f
    ap-southeast-1:
      AMI: ami-f4832f97
    ap-southeast-2:
      AMI: ami-774b7314
    ca-central-1:
      AMI: ami-be45f7da


Resources:
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ecs-${AWS::StackName}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: 
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagePolicyArns:
        - ARN::AWS::IAM::Policy/service-role/AmazonEC2ContainerServiceforEC2Role


  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSrole
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-sg-ecs-hosts
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SourceSecurityGroup
          IpProtocol: -1
      VpcId: !Ref VpcId
  
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifider: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfiguration



Outputs: